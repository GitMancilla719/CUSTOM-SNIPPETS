{
  "TS App Component": {
    "prefix": "myTSAPP",
    "body": [
      "import { FC } from 'react';",
      "import { BrowserRouter, Routes, Route, NavLink } from 'react-router-dom';",
      "",
      "const App: FC = () => {",
      "  return (",
      "    <div className=''>",
      "      <BrowserRouter>",
      "        <NavLink to='/'>Route</NavLink>",
      "",
      "        <Routes>",
      "          <Route path='/' element={null} />",
      "          {/* Nested */}",
      "          <Route path='/route'>",
      "            <Route index element={null} />",
      "            <Route path=':id' element={null} />",
      "          </Route>",
      "          {/* 404 route */}",
      "          <Route path='*' element={null} />",
      "        </Routes>",
      "      </BrowserRouter>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default App;"
    ],
    "description": "TS App Component"
  },
  "TS Function Component": {
    "prefix": "myTSARROWFC",
    "body": [
      "import { FC } from 'react';",
      "",
      "interface props {}",
      "",
      "const Component: FC<props> = () => {",
      "  return <div className=''>component</div>;",
      "};",
      "",
      "export default Component;"
    ],
    "description": "TS Function Component"
  },
  "TS Select/Dispatch": {
    "prefix": "myTSSD",
    "body": [
      "const dispatch = useAppDispatch();",
      "const count = useAppSelector((state) => state);"
    ],
    "description": "TS dispatch/Selector"
  },
  "TS RTK Store": {
    "prefix": "myTSSTORE",
    "body": [
      "import { configureStore } from '@reduxjs/toolkit';",
      "import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';",
      "",
      "const store = configureStore({",
      "  reducer: {",
      "    // your reducers",
      "  },",
      "});",
      "",
      "type RootState = ReturnType<typeof store.getState>;",
      "type AppDispatch = typeof store.dispatch;",
      "",
      "export const useAppDispatch: () => AppDispatch = useDispatch;",
      "export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;",
      "",
      "export default store;"
    ],
    "description": "RTK store TS template"
  },
  "TS RTK Slice": {
    "prefix": "myTSSLICE",
    "body": [
      "import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';",
      "import axios from 'axios';",
      "",
      "interface IState {",
      "  status: 'idle' | 'loading' | 'success' | 'failed';",
      "  value: any; // your call on value type",
      "}",
      "",
      "const initialState: IState = {",
      "  status: 'idle',",
      "  value: null,",
      "};",
      "",
      "export const thunk = createAsyncThunk<[]>('Sample/thunk', async (_, thunkAPI) => {",
      "  try {",
      "    const response = await axios.get('URL');",
      "    return response.data;",
      "  } catch (error) {",
      "    return thunkAPI.rejectWithValue(error);",
      "  }",
      "});",
      "",
      "export const SampleSlice = createSlice({",
      "  name: 'Sample',",
      "  initialState,",
      "  reducers: {",
      "    Sample: (state, action: PayloadAction<any>) => {",
      "      // your call on payload type",
      "      state.value = action.payload;",
      "    },",
      "  },",
      "  extraReducers: (builder) => {",
      "    builder",
      "      .addCase(thunk.pending, (state) => {",
      "        state.status = 'loading';",
      "      })",
      "      .addCase(thunk.fulfilled, (state, action) => {",
      "        state.status = 'success';",
      "        state.value = action.payload;",
      "      })",
      "      .addCase(thunk.rejected, (state, action) => {",
      "        state.status = 'failed';",
      "        state.value = action.payload;",
      "      });",
      "  },",
      "});",
      "",
      "export const { Sample } = SampleSlice.actions;",
      "",
      "export default SampleSlice.reducer;"
    ],
    "description": "RTK slice TS template"
  },
  "TS RTK Thunk": {
    "prefix": "myTSTHUNK",
    "body": [
      "export const thunk = createAsyncThunk<[]>('Sample/thunk', async (_, thunkAPI) => {",
      "  try {",
      "    const response = await axios.get('URL');",
      "    return response.data;",
      "  } catch (error) {",
      "    return thunkAPI.rejectWithValue(error);",
      "  }",
      "});"
    ],
    "description": "TS Thunk Function"
  },
  "CONSOLE LOG": {
    "prefix": "myCO",
    "body": "console.log()",
    "description": "console logging"
  },
  "NPM INSTALL": {
    "prefix": "myNPM",
    "body": "npm i @reduxjs/toolkit axios react-redux react-router-dom",
    "description": "NPM INSTALLS"
  },
  "NPM INSTALL -D": {
    "prefix": "myNPM-D",
    "body": "npm i -D tailwindcss postcss autoprefixer",
    "description": "NPM -D INSTALL"
  }
}
